import React, { ReactElement } from 'react';
import Document, { DocumentContext, DocumentInitialProps } from 'next/document';
import { RenderPageResult } from 'next-server/dist/lib/utils';
import { ServerStyleSheet } from 'styled-components';
import {
  AmpScripts,
  AmpScriptsManager,
  headerBoilerplate,
} from 'react-amphtml/setup';
import * as Amp from 'react-amphtml';

interface AmpReactDocumentInitialProps extends DocumentInitialProps {
  title: ReactElement;
  url: string;
  ampScriptTags: ReactElement[];
  ampStyleTag: ReactElement;
}

export default class MyDocument extends Document<AmpReactDocumentInitialProps> {
  public static async getInitialProps(
    ctx: DocumentContext,
  ): Promise<AmpReactDocumentInitialProps> {
    const ampScripts = new AmpScripts();
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    ctx.renderPage = (): RenderPageResult | Promise<RenderPageResult> =>
      originalRenderPage({
        enhanceApp: (App) => (props): ReactElement =>
          sheet.collectStyles(
            <AmpScriptsManager ampScripts={ampScripts}>
              <App {...props} />
            </AmpScriptsManager>,
          ),
      });

    try {
      const initialProps = await Document.getInitialProps(ctx);

      // AMP only allows for 1 style tag, so we need to compbine all the style
      // tags generated by styled-components
      /* eslint-disable react/no-danger, no-underscore-dangle */
      const ampStyleTag = (
        <style
          amp-custom=""
          dangerouslySetInnerHTML={{
            __html: sheet
              .getStyleElement()
              .reduce(
                (
                  css,
                  styleTag: ReactElement<{
                    dangerouslySetInnerHTML?: { __html?: string };
                  }>,
                ): string => {
                  if (
                    !styleTag ||
                    !styleTag.props ||
                    !styleTag.props.dangerouslySetInnerHTML ||
                    !styleTag.props.dangerouslySetInnerHTML.__html
                  ) {
                    return css;
                  }
                  return `${css}${styleTag.props.dangerouslySetInnerHTML.__html}`;
                },
                '',
              ),
          }}
        />
      );
      /* eslint-enable */

      // Get the dynamic `<title />` from the head generated by next.js
      const title = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean =>
          !!headTag && headTag.type === 'title',
      ) || <title>ampreact</title>;

      return {
        ...initialProps,
        title,
        url: ctx.asPath || '',
        ampScriptTags: ampScripts.getScriptElements(),
        ampStyleTag,
      };
    } finally {
      sheet.seal();
    }
  }

  public render(): ReactElement {
    const { title, url, ampScriptTags, ampStyleTag, html } = this.props;

    /* eslint-disable react/no-danger */
    return (
      <Amp.Html format="amp" lang="en">
        <head>
          {title}
          {headerBoilerplate(url)}
          {ampScriptTags}
          {ampStyleTag}
        </head>
        <body dangerouslySetInnerHTML={{ __html: html }} />
      </Amp.Html>
    );
    /* eslint-enable */
  }
}
